/**
 * License: GPL
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.janelia.alignment;

import ij.ImagePlus;

import ij.process.ImageProcessor;
import ij.IJ;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Writer;
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.lang.StringBuilder;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.lang.Math;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.AlphaComposite;
import java.awt.Graphics;
import java.awt.*;


import mpicbg.imagefeatures.Feature;
import mpicbg.imagefeatures.FloatArray2DSIFT;
import mpicbg.ij.SIFT;
import mpicbg.models.CoordinateTransform;
import mpicbg.models.CoordinateTransformList;
import mpicbg.models.InterpolatedCoordinateTransform;
import mpicbg.models.AffineModel2D;
import mpicbg.models.TranslationModel2D;
import mpicbg.models.InvertibleBoundable;

import mpicbg.models.CoordinateTransformMesh;
import mpicbg.ij.TransformMeshMapping;
import ij.process.ImageStatistics;
import ij.measure.Calibration;
import ij.measure.Measurements;
import ij.plugin.ContrastEnhancer;
import ij.io.FileSaver;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;


import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.io.ImgIOException;
import net.imglib2.io.ImgOpener;


//import mpicbg.imglib.type.numeric.real.FloatType;
//import mpicbg.imglib.type.numeric.integer.UnsignedShortType;
//import mpicbg.imglib.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.type.numeric.integer.UnsignedShortType;
import net.imglib2.type.numeric.integer.UnsignedByteType;

import mpicbg.stitching.fusion.Fusion;
import mpicbg.stitching.ImageCollectionElement;
import mpicbg.stitching.StitchingParameters;
import mpicbg.stitching.ImagePlusTimePoint;
import mpicbg.stitching.CollectionStitchingImgLib;
import mpicbg.stitching.ImageCollectionandHashContainer;

import java.util.HashMap;
import java.util.Map;
import java.util.*;


/**
 * 
 * @author Seymour Knowles-Barley
 */
public class StitchImagesByCC
{
	@Parameters
	static private class Params
	{
	  
    
		@Parameter( names = "--help", description = "Display this note", help = true )
        private final boolean help = false;

        @Parameter( names = "--imageFiles", description = "path to image files", required = true )
        private List<String> files;
        
        @Parameter( names = "--xoffsets", description = "x offsets", required = true )
        private List<Float> xoffsets;
        
         @Parameter( names = "--yoffsets", description = "y offsets", required = true )
        private List<Float> yoffsets;
        
        @Parameter( names = "--outputLayout", description = "path to save the layout file for these frames", required = false )
        private String outputLayout = null;
        
        @Parameter( names = "--outputImage", description = "Path to save image file", required = false )
        public String outputImage = null;
       
        @Parameter( names = "--addChannel", description = "Channel to add", required = false )
        public List<String> addChannel = null;
        
        @Parameter( names = "--channelWeights", description = "Weights of channels to add", required = false )
        public List<Float> channelWeights = null;
        
        @Parameter( names = "--inputtilespec", description = "Json file containing tile specs", required = false)
        public String inputtilespec = null;
        
        //test
	}
	
	private StitchImagesByCC() {}

	

	public static void main( final String[] args )
	{
		
		//ALL PARAMETERS
		final Params params = new Params();
		try
        	{
			final JCommander jc = new JCommander( params, args );
        		if ( params.help )
            		{
        			jc.usage();
                		return;
            		}
        	}
        	catch ( final Exception e )
        	{
        		e.printStackTrace();
            		final JCommander jc = new JCommander( params );
        		jc.setProgramName( "java [-options] -cp render.jar org.janelia.alignment.ReconstructImage" );
        		jc.usage(); 
        		return;
        	}
        
   	}
}
